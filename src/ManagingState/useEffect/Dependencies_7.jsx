// 1. –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫–æ–¥—É

import { createContext, useContext, useEffect, useState } from "react";

function ChatRoom({ roomId }) {
  useEffect(() => {
    const roomId = 'music'; //–æ–±—ä—è–≤–∏—Ç—å –≤ —ç—Ñ—Ñ–µ–∫—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —Å–¥–µ–ª–∞—Ç—å –Ω–µ—Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–π
    const serverUrl = 'https://localhost:1234' + roomId;

    const connection = createConnection(serverUrl, roomId);
    connection.connect();

    return () => connection.disconnect();
  }, []); 
  // —Å–Ω–∞—á–∞–ª–∞ –ø–∏—à–µ–º —Ç–µ–ª–æ —ç—Ñ—Ñ–µ–∫—Ç–∞, –∑–∞—Ç–µ–º –ø–∏—à–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏. –ï—Å–ª–∏ –Ω–∞—Å –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ 1 —à–∞–≥—É
  
  return <h1>{roomId}</h1>
}

function createConnection(serverUrl, roomId) {
  return {
    connect() {
      console.log('‚úÖ Connecting...' + roomId);
    },
    disconnect() {
      console.log('‚ùå Disconnected.' + roomId);
    }
  };
}



//***************************** */ –∞ –¥–æ–ª–∂–Ω–∞ –ª–∏ –±—ã—Ç—å —ç—Ç–∞ –ª–æ–≥–∏–∫–∞ –≤ —ç—Ñ—Ñ–µ–∫—Ç–µ?
const ThemeContext = createContext('dark');

function Form() {
  const [submitted, setSubmitted] = useState(false);
  const theme = useContext(ThemeContext);

  useEffect(() => {
    if (submitted) {
      // üî¥ Avoid: Event-specific logic inside an Effect
      post('/api/register');
      showNotification('Successfully registered!', theme);
    }
  }, [submitted]);

  function handleSubmit() {
    setSubmitted(true);
  }

  // ...
}
// –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
function Form() {
  const theme = useContext(ThemeContext);

  function handleSubmit() {
    // ‚úÖ Good: Event-specific logic is called from event handlers
    post('/api/register');
    showNotification('Successfully registered!', theme);
  }  

  // ...
}




//**************************–Ω–µ –¥–µ–ª–∞–µ—Ç –ª–∏ –Ω–∞—à —ç—Ñ—Ñ–µ–∫—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º –≤–µ—â–µ–π?
function ShippingForm({ country }) {
  const [cities, setCities] = useState(null);
  const [city, setCity] = useState(null);
  const [areas, setAreas] = useState(null);

  useEffect(() => {
    let ignore = false;
    fetch(`/api/cities?country=${country}`)
      .then(response => response.json())
      .then(json => {
        if (!ignore) {
          setCities(json);
        }
      });
    // üî¥ Avoid: A single Effect synchronizes two independent processes
    if (city) {
      fetch(`/api/areas?city=${city}`)
        .then(response => response.json())
        .then(json => {
          if (!ignore) {
            setAreas(json);
          }
        });
    }
    return () => {
      ignore = true;
    };
  }, [country, city]); // ‚úÖ All dependencies declared
}
// –æ—Ç–¥–µ–ª—å–Ω—ã–µ useEffect
function ShippingForm({ country }) {
  const [cities, setCities] = useState(null);
  useEffect(() => {
    let ignore = false;
    fetch(`/api/cities?country=${country}`)
      .then(response => response.json())
      .then(json => {
        if (!ignore) {
          setCities(json);
        }
      });
    return () => {
      ignore = true;
    };
  }, [country]); // ‚úÖ All dependencies declared

  const [city, setCity] = useState(null);
  const [areas, setAreas] = useState(null);
  useEffect(() => {
    if (city) {
      let ignore = false;
      fetch(`/api/areas?city=${city}`)
        .then(response => response.json())
        .then(json => {
          if (!ignore) {
            setAreas(json);
          }
        });
      return () => {
        ignore = true;
      };
    }
  }, [city]); // ‚úÖ All dependencies declared
}


//************************** */ —á–∏—Ç–∞–µ–º –ª–∏ –º—ã –∫–∞–∫–æ–µ-—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —ç—Ñ—Ñ–µ–∫—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ?
function ChatRoom({ roomId }) {
  const [messages, setMessages] = useState([]);
  useEffect(() => {
    const serverUrl = 'https://localhost:1234' + roomId;

    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    connection.on('message', (receivedMessage) => {
      setMessages([...messages, receivedMessage]);
    });
    return () => connection.disconnect();
  }, [roomId, messages]);
}
// –∏—Å–ø–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é-update, –∞ –Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
function ChatRoom({ roomId }) {
  const [messages, setMessages] = useState([]);
  useEffect(() => {
    const serverUrl = 'https://localhost:1234' + roomId;
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    connection.on('message', (receivedMessage) => {
      setMessages(msgs => [...msgs, receivedMessage]);
    });
    return () => connection.disconnect();
  }, [roomId]); // ‚úÖ All dependencies declared
}




//*********************************–º–µ–Ω—è–µ—Ç—Å—è –ª–∏ –∫–∞–∫–æ–µ=—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å–ª—É—á–∞–π–Ω–æ –∏–ª–∏ –Ω–µ–Ω–∞–º–µ—Ä–µ–Ω–Ω–æ?
function ChatRoom({ roomId }) {
  const [messages, setMessages] = useState([]);

  const serverUrl = 'https://localhost:1234' + roomId;

  // const options = { serverUrl, roomId };

  useEffect(() => {
    const options = { serverUrl, roomId }; //1. –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å options –≤ —ç—Ñ—Ñ–µ–∫—Ç
    const connection = createConnection2(options);
    connection.connect();

    return () => connection.disconnect();
  }, [serverUrl, roomId]);
}
// 2. –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —Å—Ç–∞—Ç–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
function ChatRoom({ roomId }) {
  const [messages, setMessages] = useState([]);

  const serverUrl = 'https://localhost:1234' + roomId;

  function createOptions() { //—Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –Ω–µ —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–µ
    return {
      serverUrl: 'url', 
      roomId: 'music'
    }
  }

  useEffect(() => {
    const options = createOptions();
    const connection = createConnection2(options);
    connection.connect();

    return () => connection.disconnect();
  }, []); // ‚úÖ All dependencies declared
}

//–¥—Ä—É–≥–æ–π –ø—Ä–∏–º–µ—Ä
function ChatRoom({ options }) { //–ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è
  const [messages, setMessages] = useState([]);

  const { roomId, serverUrl } = options;

  useEffect(() => {
    const connection = createConnection2({ roomId, serverUrl });
    connection.connect();

    return () => connection.disconnect();
  }, [roomId, serverUrl]); // ‚úÖ All dependencies declared
}

function createConnection2({serverUrl, roomId}) { //object
  return {
    connect() {
      console.log('‚úÖ Connecting...' + roomId);
    },
    disconnect() {
      console.log('‚ùå Disconnected.' + roomId);
    }
  };
}